{"ast":null,"code":"var _jsxFileName = \"/Users/user/WebstormProjects/English-words/src/containers/themesList/modalWindow/modalWindow.js\";\nimport React, { Component } from 'react';\nimport { GetAllWordsFromDB, SendWordsInDB } from \"../../../components/DataDB/DataDB\";\nimport Word from \"../../wordList/Word/Word\";\nimport './modalWindow.css';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ModalWindow extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      words: [],\n      themesWords: {\n        name: '',\n        list: []\n      },\n      nameTheme: ''\n    };\n\n    this.addWordsHandler = async () => {\n      let themesWordsBlock = document.querySelectorAll('.modal-string.active-string');\n      themesWordsBlock.forEach(item => {\n        let word = {\n          'word': item.firstChild.textContent,\n          'translation': item.lastChild.textContent\n        };\n        let themesWords = this.state.themesWords;\n        console.log(themesWords.list); // themesWords.list.push(word);\n        // this.setState({\n        //     themesWords\n        // });\n      }); //console.log(this.state)\n      //SendWordsInDB('Themes', this.state.themesWords);\n    };\n\n    this.setNameTheme = event => {\n      this.setState({\n        themesWords: {\n          name: event.target.value,\n          list: { ...this.state.themesWords.list\n          }\n        }\n      });\n      console.log(this.state);\n    };\n  }\n\n  componentDidMount() {\n    GetAllWordsFromDB().then(value => {\n      this.setState({\n        words: value\n      });\n    });\n  }\n\n  renderModalWindow() {\n    return this.state.words.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: event => event.currentTarget.classList.toggle('active-string'),\n        className: \"modal-string\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: item.word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: item.translation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ModalWindow\",\n      children: [this.renderModalWindow(), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0442\\u0435\\u043C\\u044B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: this.setNameTheme,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.addWordsHandler,\n        children: \"add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ModalWindow;","map":{"version":3,"sources":["/Users/user/WebstormProjects/English-words/src/containers/themesList/modalWindow/modalWindow.js"],"names":["React","Component","GetAllWordsFromDB","SendWordsInDB","Word","axios","ModalWindow","state","words","themesWords","name","list","nameTheme","addWordsHandler","themesWordsBlock","document","querySelectorAll","forEach","item","word","firstChild","textContent","lastChild","console","log","setNameTheme","event","setState","target","value","componentDidMount","then","renderModalWindow","map","currentTarget","classList","toggle","translation","id","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,iBAAR,EAA2BC,aAA3B,QAA+C,mCAA/C;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,OAAO,mBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AACA,MAAMC,WAAN,SAA0BL,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAChCM,KADgC,GACxB;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,WAAW,EAAE;AAACC,QAAAA,IAAI,EAAE,EAAP;AAAWC,QAAAA,IAAI,EAAE;AAAjB,OAFT;AAGJC,MAAAA,SAAS,EAAE;AAHP,KADwB;;AAAA,SAchCC,eAdgC,GAcd,YAAW;AACzB,UAAIC,gBAAgB,GAAGC,QAAQ,CAACC,gBAAT,CAA0B,6BAA1B,CAAvB;AACAF,MAAAA,gBAAgB,CAACG,OAAjB,CAAyBC,IAAI,IAAI;AAC7B,YAAIC,IAAI,GAAG;AAAC,kBAAOD,IAAI,CAACE,UAAL,CAAgBC,WAAxB;AAAqC,yBAAeH,IAAI,CAACI,SAAL,CAAeD;AAAnE,SAAX;AACA,YAAIZ,WAAW,GAAG,KAAKF,KAAL,CAAWE,WAA7B;AACAc,QAAAA,OAAO,CAACC,GAAR,CAAYf,WAAW,CAACE,IAAxB,EAH6B,CAI7B;AACA;AACA;AACA;AACH,OARD,EAFyB,CAWzB;AACA;AACH,KA3B+B;;AAAA,SA6BhCc,YA7BgC,GA6BjBC,KAAK,IAAG;AACnB,WAAKC,QAAL,CAAc;AACVlB,QAAAA,WAAW,EAAE;AAACC,UAAAA,IAAI,EAAEgB,KAAK,CAACE,MAAN,CAAaC,KAApB;AAA2BlB,UAAAA,IAAI,EAAE,EAAC,GAAG,KAAKJ,KAAL,CAAWE,WAAX,CAAuBE;AAA3B;AAAjC;AADH,OAAd;AAGAY,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKjB,KAAjB;AACH,KAlC+B;AAAA;;AAMhCuB,EAAAA,iBAAiB,GAAG;AAChB5B,IAAAA,iBAAiB,GAAG6B,IAApB,CAAyBF,KAAK,IAAI;AAC1B,WAAKF,QAAL,CAAc;AACVnB,QAAAA,KAAK,EAAEqB;AADG,OAAd;AAGH,KAJL;AAMH;;AAuBDG,EAAAA,iBAAiB,GAAE;AACf,WAAO,KAAKzB,KAAL,CAAWC,KAAX,CAAiByB,GAAjB,CAAqBf,IAAI,IAAG;AAC/B,0BAAQ;AAAqB,QAAA,OAAO,EAAIQ,KAAK,IAAIA,KAAK,CAACQ,aAAN,CAAoBC,SAApB,CAA8BC,MAA9B,CAAqC,eAArC,CAAzC;AAAgG,QAAA,SAAS,EAAG,cAA5G;AAAA,gCACJ;AAAA,oBAAIlB,IAAI,CAACC;AAAT;AAAA;AAAA;AAAA;AAAA,gBADI,eAEJ;AAAA,oBAAID,IAAI,CAACmB;AAAT;AAAA;AAAA;AAAA;AAAA,gBAFI;AAAA,SAAYnB,IAAI,CAACoB,EAAjB;AAAA;AAAA;AAAA;AAAA,cAAR;AAIH,KALM,CAAP;AAMH;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAG,aAAjB;AAAA,iBACK,KAAKP,iBAAL,EADL,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAO,QAAA,QAAQ,EAAE,KAAKP,YAAtB;AAAoC,QAAA,IAAI,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAQ,QAAA,OAAO,EAAE,KAAKZ,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AAtD+B;;AAyDpC,eAAeP,WAAf","sourcesContent":["import React, {Component} from 'react';\nimport {GetAllWordsFromDB, SendWordsInDB} from \"../../../components/DataDB/DataDB\";\nimport Word from \"../../wordList/Word/Word\";\nimport './modalWindow.css';\nimport axios from \"axios\";\nclass ModalWindow extends Component {\n    state = {\n        words: [],\n        themesWords: {name: '', list: []},\n        nameTheme: ''\n    };\n    componentDidMount() {\n        GetAllWordsFromDB().then(value => {\n                this.setState({\n                    words: value\n                })\n            }\n        )\n    }\n    addWordsHandler = async () =>{\n        let themesWordsBlock = document.querySelectorAll('.modal-string.active-string');\n        themesWordsBlock.forEach(item => {\n            let word = {'word':item.firstChild.textContent, 'translation': item.lastChild.textContent,};\n            let themesWords = this.state.themesWords;\n            console.log(themesWords.list)\n            // themesWords.list.push(word);\n            // this.setState({\n            //     themesWords\n            // });\n        });\n        //console.log(this.state)\n        //SendWordsInDB('Themes', this.state.themesWords);\n    };\n\n    setNameTheme = event =>{\n        this.setState({\n            themesWords: {name: event.target.value, list: {...this.state.themesWords.list}}\n        });\n        console.log(this.state)\n    };\n\n    renderModalWindow(){\n        return this.state.words.map(item =>{\n            return  <div key = {item.id} onClick = {event => event.currentTarget.classList.toggle('active-string')} className = 'modal-string' >\n                <p>{item.word}</p>\n                <p>{item.translation}</p>\n            </div>\n        })\n    }\n\n    render() {\n        return (\n            <div className = 'ModalWindow'>\n                {this.renderModalWindow()}\n                <p>Название темы</p>\n                <input onChange={this.setNameTheme} type=\"text\"/>\n                <button onClick={this.addWordsHandler}>add</button>\n            </div>\n        );\n    }\n}\n\nexport default ModalWindow;\n"]},"metadata":{},"sourceType":"module"}