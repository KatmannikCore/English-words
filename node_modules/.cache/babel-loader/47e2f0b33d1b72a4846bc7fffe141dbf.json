{"ast":null,"code":"var _jsxFileName = \"/Users/user/WebstormProjects/english-words/src/containers/addWord/modalWindow/modalWindow.js\";\nimport React, { Component } from 'react';\nimport GetAllWord from \"../../../components/DataDB/DataDB\";\nimport Word from \"../../wordList/Word/Word\";\nimport './modalWindow.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ModalWindow extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      words: [],\n      themesWords: []\n    };\n\n    this.onClickHandler = event => {\n      event.currentTarget.classList.toggle('active-string');\n\n      if (event.target.className === 'modal-string active-string') {\n        let word = {\n          'word': event.currentTarget.firstChild.textContent,\n          'translation': event.currentTarget.lastChild.textContent\n        };\n        let themesWords = this.state.themesWords;\n        themesWords.push(word);\n        this.setState({\n          themesWords\n        });\n      } else {\n        let themesWords = this.state.themesWords;\n\n        for (let i = 0; i < themesWords.length; i++) {\n          if (themesWords[i].word === this.state.themesWords[i].word) {\n            themesWords.splice(i, 1);\n            this.setState({\n              themesWords\n            });\n          }\n        }\n      }\n\n      console.log(this.state.themesWords);\n    };\n  }\n\n  componentDidMount() {\n    GetAllWord().then(value => {\n      this.setState({\n        words: value\n      });\n    });\n  }\n\n  addWordsHandler(event) {\n    console.log(event.currentTarget.value);\n  }\n\n  renderModalWindow() {\n    return this.state.words.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: this.onClickHandler,\n        className: \"modal-string\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: item.word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: item.translation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ModalWindow\",\n      children: [this.renderModalWindow(), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.addWordsHandler,\n        children: \"add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ModalWindow;","map":{"version":3,"sources":["/Users/user/WebstormProjects/english-words/src/containers/addWord/modalWindow/modalWindow.js"],"names":["React","Component","GetAllWord","Word","ModalWindow","state","words","themesWords","onClickHandler","event","currentTarget","classList","toggle","target","className","word","firstChild","textContent","lastChild","push","setState","i","length","splice","console","log","componentDidMount","then","value","addWordsHandler","renderModalWindow","map","item","translation","id","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,UAAP,MAAuB,mCAAvB;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,OAAO,mBAAP;;;AACA,MAAMC,WAAN,SAA0BH,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAChCI,KADgC,GACxB;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,WAAW,EAAE;AAFT,KADwB;;AAAA,SAgBhCC,cAhBgC,GAgBfC,KAAK,IAAG;AACrBA,MAAAA,KAAK,CAACC,aAAN,CAAoBC,SAApB,CAA8BC,MAA9B,CAAqC,eAArC;;AACA,UAAGH,KAAK,CAACI,MAAN,CAAaC,SAAb,KAA2B,4BAA9B,EAA2D;AACvD,YAAIC,IAAI,GAAG;AAAC,kBAAON,KAAK,CAACC,aAAN,CAAoBM,UAApB,CAA+BC,WAAvC;AAAoD,yBAAeR,KAAK,CAACC,aAAN,CAAoBQ,SAApB,CAA8BD;AAAjG,SAAX;AACA,YAAIV,WAAW,GAAG,KAAKF,KAAL,CAAWE,WAA7B;AACAA,QAAAA,WAAW,CAACY,IAAZ,CAAiBJ,IAAjB;AACA,aAAKK,QAAL,CAAc;AACVb,UAAAA;AADU,SAAd;AAGH,OAPD,MAOM;AACF,YAAIA,WAAW,GAAG,KAAKF,KAAL,CAAWE,WAA7B;;AACA,aAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,WAAW,CAACe,MAAhC,EAAwCD,CAAC,EAAzC,EAA4C;AACxC,cAAGd,WAAW,CAACc,CAAD,CAAX,CAAeN,IAAf,KAAwB,KAAKV,KAAL,CAAWE,WAAX,CAAuBc,CAAvB,EAA0BN,IAArD,EAA2D;AACvDR,YAAAA,WAAW,CAACgB,MAAZ,CAAmBF,CAAnB,EAAsB,CAAtB;AACA,iBAAKD,QAAL,CAAc;AACVb,cAAAA;AADU,aAAd;AAGH;AACJ;AACJ;;AACDiB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAL,CAAWE,WAAvB;AACH,KArC+B;AAAA;;AAKhCmB,EAAAA,iBAAiB,GAAG;AAChBxB,IAAAA,UAAU,GAAGyB,IAAb,CAAkBC,KAAK,IAAI;AACnB,WAAKR,QAAL,CAAc;AACVd,QAAAA,KAAK,EAAEsB;AADG,OAAd;AAGH,KAJL;AAMH;;AACDC,EAAAA,eAAe,CAACpB,KAAD,EAAO;AACnBe,IAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAK,CAACC,aAAN,CAAoBkB,KAAhC;AACF;;AAuBDE,EAAAA,iBAAiB,GAAE;AACf,WAAO,KAAKzB,KAAL,CAAWC,KAAX,CAAiByB,GAAjB,CAAqBC,IAAI,IAAG;AAC/B,0BAAQ;AAAqB,QAAA,OAAO,EAAI,KAAKxB,cAArC;AAAqD,QAAA,SAAS,EAAG,cAAjE;AAAA,gCACJ;AAAA,oBAAIwB,IAAI,CAACjB;AAAT;AAAA;AAAA;AAAA;AAAA,gBADI,eAEJ;AAAA,oBAAIiB,IAAI,CAACC;AAAT;AAAA;AAAA;AAAA;AAAA,gBAFI;AAAA,SAAYD,IAAI,CAACE,EAAjB;AAAA;AAAA;AAAA;AAAA,cAAR;AAIH,KALM,CAAP;AAMH;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAG,aAAjB;AAAA,iBACK,KAAKL,iBAAL,EADL,eAEI;AAAQ,QAAA,OAAO,EAAE,KAAKD,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAtD+B;;AAyDpC,eAAezB,WAAf","sourcesContent":["import React, {Component} from 'react';\nimport GetAllWord from \"../../../components/DataDB/DataDB\";\nimport Word from \"../../wordList/Word/Word\";\nimport './modalWindow.css';\nclass ModalWindow extends Component {\n    state = {\n        words: [],\n        themesWords: []\n    };\n    componentDidMount() {\n        GetAllWord().then(value => {\n                this.setState({\n                    words: value\n                })\n            }\n        )\n    }\n    addWordsHandler(event){\n       console.log(event.currentTarget.value)\n    }\n    onClickHandler = event =>{\n        event.currentTarget.classList.toggle('active-string');\n        if(event.target.className === 'modal-string active-string'){\n            let word = {'word':event.currentTarget.firstChild.textContent, 'translation': event.currentTarget.lastChild.textContent};\n            let themesWords = this.state.themesWords;\n            themesWords.push(word);\n            this.setState({\n                themesWords\n            });\n        }else {\n            let themesWords = this.state.themesWords;\n            for (let i = 0; i < themesWords.length; i++){\n                if(themesWords[i].word === this.state.themesWords[i].word ){\n                    themesWords.splice(i, 1);\n                    this.setState({\n                        themesWords\n                    });\n                }\n            }\n        }\n        console.log(this.state.themesWords)\n    };\n    renderModalWindow(){\n        return this.state.words.map(item =>{\n            return  <div key = {item.id} onClick = {this.onClickHandler} className = 'modal-string' >\n                <p>{item.word}</p>\n                <p>{item.translation}</p>\n            </div>\n        })\n    }\n\n    render() {\n        return (\n            <div className = 'ModalWindow'>\n                {this.renderModalWindow()}\n                <button onClick={this.addWordsHandler}>add</button>\n            </div>\n        );\n    }\n}\n\nexport default ModalWindow;\n"]},"metadata":{},"sourceType":"module"}