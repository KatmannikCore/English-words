{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/English-words/src/containers/addWord/addWord.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './addWord.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddWord(props) {\n  _s();\n\n  let [wordEn, setWordEn] = useState('');\n  let [wordRu, setWordRu] = useState('');\n  let [validation, setValidation] = useState(false);\n  let [errorRu, setErrorRu] = useState('');\n  let [errorEn, setErrorEn] = useState('');\n\n  async function addWordHandler(event) {\n    event.preventDefault();\n    validationForm();\n\n    if (validation) {\n      try {\n        await axios.post('https://react-words-29c77-default-rtdb.firebaseio.com/word.json', {\n          word: wordEn,\n          translation: wordRu\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    cleanForm();\n  }\n\n  function validationForm() {\n    setErrorEn(validationWord(wordEn));\n    setErrorRu(validationWord(wordRu));\n    setValidation(errorRu !== '' && errorEn !== '');\n  }\n\n  function validationWord(word) {\n    if (word.trim().length === 0) {\n      return 'Entry field doesn\\'t can be empty or complit of spaces';\n    }\n  }\n\n  function cleanForm() {\n    setWordEn('');\n    setWordRu('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Russian word\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: wordRu,\n      onChange: event => {\n        setWordRu(event.target.value);\n      },\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), validation ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"exception_valid\",\n      children: errorRu\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 26\n    }, this) : '', /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"English word\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: wordEn,\n      onChange: event => {\n        setWordEn(event.target.value);\n      },\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), validation ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"exception_valid\",\n      children: errorEn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 26\n    }, this) : '', /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addWordHandler,\n      children: \"send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddWord, \"CC6D35QhJRQcW3ZxHyCBriT2O6E=\");\n\n_c = AddWord;\nexport default AddWord;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddWord\");","map":{"version":3,"sources":["/Users/user/Desktop/English-words/src/containers/addWord/addWord.js"],"names":["React","useState","axios","AddWord","props","wordEn","setWordEn","wordRu","setWordRu","validation","setValidation","errorRu","setErrorRu","errorEn","setErrorEn","addWordHandler","event","preventDefault","validationForm","post","word","translation","e","console","log","cleanForm","validationWord","trim","length","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,eAAP;;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACpB,MAAI,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAAlC;AACA,MAAI,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAAlC;AACA,MAAI,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,KAAD,CAA1C;AACA,MAAI,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAApC;AACA,MAAI,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAApC;;AACA,iBAAec,cAAf,CAA8BC,KAA9B,EAAqC;AACjCA,IAAAA,KAAK,CAACC,cAAN;AACAC,IAAAA,cAAc;;AACd,QAAIT,UAAJ,EAAe;AACX,UAAI;AACA,cAAMP,KAAK,CAACiB,IAAN,CAAW,iEAAX,EAA8E;AAACC,UAAAA,IAAI,EAAEf,MAAP;AAAegB,UAAAA,WAAW,EAAEd;AAA5B,SAA9E,CAAN;AACH,OAFD,CAEE,OAAOe,CAAP,EAAU;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ;;AACDG,IAAAA,SAAS;AACZ;;AACD,WAASP,cAAT,GAA0B;AACtBJ,IAAAA,UAAU,CAACY,cAAc,CAACrB,MAAD,CAAf,CAAV;AACAO,IAAAA,UAAU,CAACc,cAAc,CAACnB,MAAD,CAAf,CAAV;AACAG,IAAAA,aAAa,CAACC,OAAO,KAAK,EAAZ,IAAkBE,OAAO,KAAK,EAA/B,CAAb;AACH;;AACD,WAASa,cAAT,CAAwBN,IAAxB,EAA8B;AAC1B,QAAGA,IAAI,CAACO,IAAL,GAAYC,MAAZ,KAAuB,CAA1B,EAA4B;AACxB,aAAO,wDAAP;AACH;AACJ;;AACD,WAASH,SAAT,GAAqB;AACjBnB,IAAAA,SAAS,CAAC,EAAD,CAAT;AACAE,IAAAA,SAAS,CAAC,EAAD,CAAT;AACH;;AACD,sBACI;AAAK,IAAA,SAAS,EAAG,MAAjB;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,KAAK,EAAED,MAAd;AAAsB,MAAA,QAAQ,EAAGS,KAAD,IAAW;AAACR,QAAAA,SAAS,CAACQ,KAAK,CAACa,MAAN,CAAaC,KAAd,CAAT;AAA8B,OAA1E;AAA4E,MAAA,IAAI,EAAC;AAAjF;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGKrB,UAAU,gBAAE;AAAG,MAAA,SAAS,EAAC,iBAAb;AAAA,gBAAgCE;AAAhC;AAAA;AAAA;AAAA;AAAA,YAAF,GAAgD,EAH/D,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAO,MAAA,KAAK,EAAEN,MAAd;AAAsB,MAAA,QAAQ,EAAGW,KAAD,IAAW;AAACV,QAAAA,SAAS,CAACU,KAAK,CAACa,MAAN,CAAaC,KAAd,CAAT;AAA8B,OAA1E;AAA4E,MAAA,IAAI,EAAC;AAAjF;AAAA;AAAA;AAAA;AAAA,YALJ,EAMKrB,UAAU,gBAAE;AAAG,MAAA,SAAS,EAAC,iBAAb;AAAA,gBAAgCI;AAAhC;AAAA;AAAA;AAAA;AAAA,YAAF,GAAgD,EAN/D,eAOI;AAAQ,MAAA,OAAO,EAAEE,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GA3CQZ,O;;KAAAA,O;AA4CT,eAAeA,OAAf","sourcesContent":["import React,{useState}  from 'react';\nimport axios from 'axios'\nimport './addWord.css'\n\nfunction AddWord(props) {\n    let [wordEn, setWordEn] = useState('');\n    let [wordRu, setWordRu] = useState('');\n    let [validation, setValidation] = useState(false);\n    let [errorRu, setErrorRu] = useState('');\n    let [errorEn, setErrorEn] = useState('');\n    async function addWordHandler(event) {\n        event.preventDefault();\n        validationForm();\n        if (validation){\n            try {\n                await axios.post('https://react-words-29c77-default-rtdb.firebaseio.com/word.json', {word: wordEn, translation: wordRu });\n            } catch (e) {\n                console.log(e)\n            }\n        }\n        cleanForm();\n    }\n    function validationForm() {\n        setErrorEn(validationWord(wordEn));\n        setErrorRu(validationWord(wordRu));\n        setValidation(errorRu !== '' && errorEn !== '')\n    }\n    function validationWord(word) {\n        if(word.trim().length === 0){\n            return 'Entry field doesn\\'t can be empty or complit of spaces'\n        }\n    }\n    function cleanForm() {\n        setWordEn('');\n        setWordRu('');\n    }\n    return (\n        <div className = 'body'>\n            <p>Russian word</p>\n            <input value={wordRu} onChange={(event) => {setWordRu(event.target.value)}} type=\"text\"/>\n            {validation ?<p className='exception_valid'>{errorRu}</p>: '' }\n            <p>English word</p>\n            <input value={wordEn} onChange={(event) => {setWordEn(event.target.value)}} type=\"text\"/>\n            {validation ?<p className='exception_valid'>{errorEn}</p>: '' }\n            <button onClick={addWordHandler}>send</button>\n        </div>\n    );\n}\nexport default AddWord"]},"metadata":{},"sourceType":"module"}