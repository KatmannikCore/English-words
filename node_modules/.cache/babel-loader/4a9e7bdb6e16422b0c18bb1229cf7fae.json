{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/English-words/src/containers/learnWords/learnWords.js\";\nimport React, { Component } from 'react';\nimport { GetAllThemesFromDB, GetAllWordsFromDB } from \"../../components/DataDB/DataDB\";\nimport './learnWords.css';\nimport ModalWindowChooseTheme from \"./modalWindowChooseTheme/modalWindowChooseTheme\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LearnWords extends Component {\n  constructor() {\n    super();\n\n    this.changeTheme = value => {\n      this.setState({\n        currentTheme: value.list,\n        currentWord: value.list[this.state.currentNumber]\n      });\n      this.createWindow();\n    };\n\n    this.checkWordHandler = () => {\n      if (this.state.userWord === this.state.currentWord.word) {\n        let currentTheme = this.state.currentTheme.splice(this.state.currentNumber, 1);\n        this.setState({\n          isRightWord: true,\n          currentTheme\n        });\n      } else {\n        this.setState({\n          isRightWord: false\n        });\n      }\n\n      console.log(this.state);\n    };\n\n    this.changeWordHandler = () => {\n      console.log(this.state.currentNumber, this.state.currentTheme);\n      this.setState({\n        currentWord: this.state.currentTheme[this.state.currentNumber],\n        currentNumber: Math.floor(Math.random() * this.state.currentTheme.length)\n      });\n      console.log(this.state);\n    };\n\n    this.createWindow = () => {\n      this.setState({\n        isOpenWindow: !this.state.isOpenWindow\n      });\n      console.log(this.state);\n    };\n\n    this.onChangeHandler = event => {\n      this.setState({\n        userWord: event.target.value\n      });\n      event.target.value = '';\n    };\n\n    this.state = {\n      currentWord: {},\n      currentNumber: 1,\n      isRightWord: false,\n      userWord: '',\n      themes: [],\n      currentTheme: [],\n      isOpenWindow: false\n    };\n    this.changeTheme = this.changeTheme.bind(this);\n  }\n\n  componentDidMount() {\n    GetAllThemesFromDB().then(value => {\n      this.setState({\n        themes: value\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.createWindow,\n        children: \"\\u0412\\u044B\\u0431\\u0440\\u0430\\u0442\\u044C \\u0442\\u0435\\u043C\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), this.state.isOpenWindow ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.changeWordHandler,\n          children: \"Change\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: this.onChangeHandler,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.checkWordHandler,\n          children: \"Check\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.isRightWord ? 'верно' : 'неверно'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(ModalWindowChooseTheme, {\n        themes: this.state.themes,\n        changeTheme: this.changeTheme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default LearnWords;","map":{"version":3,"sources":["/Users/user/Desktop/English-words/src/containers/learnWords/learnWords.js"],"names":["React","Component","GetAllThemesFromDB","GetAllWordsFromDB","ModalWindowChooseTheme","LearnWords","constructor","changeTheme","value","setState","currentTheme","list","currentWord","state","currentNumber","createWindow","checkWordHandler","userWord","word","splice","isRightWord","console","log","changeWordHandler","Math","floor","random","length","isOpenWindow","onChangeHandler","event","target","themes","bind","componentDidMount","then","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {GetAllThemesFromDB, GetAllWordsFromDB} from \"../../components/DataDB/DataDB\";\nimport './learnWords.css'\nimport ModalWindowChooseTheme from \"./modalWindowChooseTheme/modalWindowChooseTheme\";\nclass LearnWords extends Component {\n    constructor(){\n        super();\n        this.state = {\n            currentWord: {},\n            currentNumber: 1,\n            isRightWord: false,\n            userWord: '',\n            themes: [],\n            currentTheme: [],\n            isOpenWindow:false,\n        };\n        this.changeTheme = this.changeTheme.bind(this)\n    }\n    changeTheme = (value) =>{\n        this.setState({\n            currentTheme: value.list,\n            currentWord: value.list[this.state.currentNumber]\n        });\n        this.createWindow()\n    };\n    checkWordHandler = () => {\n       if(this.state.userWord === this.state.currentWord.word){\n           let currentTheme = this.state.currentTheme.splice(this.state.currentNumber, 1)\n           this.setState({\n               isRightWord:true,\n               currentTheme\n           });\n\n       }else {\n           this.setState({\n               isRightWord:false\n           })\n       }\n        console.log(this.state)\n    };\n    changeWordHandler = () => {\n        console.log(this.state.currentNumber, this.state.currentTheme);\n        this.setState({\n            currentWord: this.state.currentTheme[this.state.currentNumber],\n            currentNumber: Math.floor(Math.random() * this.state.currentTheme.length)\n        });\n        console.log( this.state)\n    };\n    createWindow = () => {\n        this.setState({\n            isOpenWindow: !this.state.isOpenWindow\n        });\n        console.log( this.state)\n    };\n    componentDidMount() {\n        GetAllThemesFromDB().then(value => {\n            this.setState({\n                themes: value,\n            })\n        });\n    }\n    onChangeHandler = (event) =>{\n        this.setState({userWord:event.target.value});\n        event.target.value = ''\n    };\n    render() {\n        return (\n            <div className = 'body'>\n                <button onClick={this.createWindow}>Выбрать тему</button>\n                {this.state.isOpenWindow ?(\n                    <div>\n                        {/*<p>{this.state.currentWord.translation}</p>*/}\n                        <button onClick={this.changeWordHandler}>Change</button>\n                        <input onChange={this.onChangeHandler} type=\"text\"/>\n                        <button onClick={this.checkWordHandler}>Check</button>\n                        <p>{this.state.isRightWord ? 'верно':'неверно'}</p>\n                    </div>)\n                    :(<ModalWindowChooseTheme themes={this.state.themes} changeTheme = {this.changeTheme}/>)\n                }\n            </div>\n        );\n    }\n}\n\nexport default LearnWords;"]},"metadata":{},"sourceType":"module"}