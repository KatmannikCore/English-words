{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/English-words/src/containers/addWord/addWord.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './addWord.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddWord(props) {\n  _s();\n\n  let word = useState({\n    word: '',\n    translation: ''\n  });\n  let validation = useState(false);\n  let errorRu = useState('');\n  let errorEn = useState('');\n\n  async function addWordHandler(event) {\n    event.preventDefault();\n    validationForm();\n\n    if (validation) {\n      try {\n        await axios.post('https://react-words-29c77-default-rtdb.firebaseio.com/word.json', word[0]);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n\n  function validationForm() {\n    errorEn = validationWord(word[0].translation);\n    errorRu = validationWord(word[0].word);\n    validation = errorRu !== '' && errorEN !== '';\n  }\n\n  function validationWord(word) {\n    if (word.trim().length === 0) {\n      return 'Entry field doesn\\'t can be empty or complit of spaces';\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0420\\u0443\\u0441\\u0441\\u043A\\u043E\\u0435 \\u0441\\u043B\\u043E\\u0432\\u043E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: event => {\n        word[0].word = event.target.value;\n      },\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), !validation ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"exception_valid\",\n      children: errorRu\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 27\n    }, this) : '1', /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0410\\u043D\\u0433\\u043B\\u0438\\u0441\\u043A\\u043E\\u0435 \\u0441\\u043B\\u043E\\u0432\\u043E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: event => {\n        word[0].translation = event.target.value;\n      },\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), !validation ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"exception_valid\",\n      children: errorEn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 27\n    }, this) : '2', /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addWordHandler,\n      children: \"send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddWord, \"H3JP+CXAxpBIVnsQDHkKQMg+j3c=\");\n\n_c = AddWord;\nexport default AddWord;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddWord\");","map":{"version":3,"sources":["/Users/user/Desktop/English-words/src/containers/addWord/addWord.js"],"names":["React","useState","axios","AddWord","props","word","translation","validation","errorRu","errorEn","addWordHandler","event","preventDefault","validationForm","post","e","console","log","validationWord","errorEN","trim","length","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,eAAP;;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACpB,MAAIC,IAAI,GAAGJ,QAAQ,CAAC;AAChBI,IAAAA,IAAI,EAAE,EADU;AAEhBC,IAAAA,WAAW,EAAE;AAFG,GAAD,CAAnB;AAIA,MAAIC,UAAU,GAAGN,QAAQ,CAAC,KAAD,CAAzB;AACA,MAAIO,OAAO,GAAGP,QAAQ,CAAC,EAAD,CAAtB;AACA,MAAIQ,OAAO,GAAGR,QAAQ,CAAC,EAAD,CAAtB;;AACA,iBAAeS,cAAf,CAA8BC,KAA9B,EAAqC;AACjCA,IAAAA,KAAK,CAACC,cAAN;AACAC,IAAAA,cAAc;;AACd,QAAIN,UAAJ,EAAe;AACX,UAAI;AACA,cAAML,KAAK,CAACY,IAAN,CAAW,iEAAX,EAA8ET,IAAI,CAAC,CAAD,CAAlF,CAAN;AACH,OAFD,CAEE,OAAOU,CAAP,EAAU;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ;AACJ;;AACD,WAASF,cAAT,GAA0B;AACtBJ,IAAAA,OAAO,GAAGS,cAAc,CAACb,IAAI,CAAC,CAAD,CAAJ,CAAQC,WAAT,CAAxB;AACAE,IAAAA,OAAO,GAAGU,cAAc,CAACb,IAAI,CAAC,CAAD,CAAJ,CAAQA,IAAT,CAAxB;AACAE,IAAAA,UAAU,GAAIC,OAAO,KAAK,EAAZ,IAAkBW,OAAO,KAAK,EAA5C;AACH;;AACD,WAASD,cAAT,CAAwBb,IAAxB,EAA8B;AAC1B,QAAGA,IAAI,CAACe,IAAL,GAAYC,MAAZ,KAAuB,CAA1B,EAA4B;AACxB,aAAO,wDAAP;AACH;AACJ;;AACD,sBACI;AAAK,IAAA,SAAS,EAAG,MAAjB;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,QAAQ,EAAGV,KAAD,IAAW;AAACN,QAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQA,IAAR,GAAeM,KAAK,CAACW,MAAN,CAAaC,KAA5B;AAAkC,OAA/D;AAAiE,MAAA,IAAI,EAAC;AAAtE;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGK,CAAChB,UAAD,gBAAa;AAAG,MAAA,SAAS,EAAC,iBAAb;AAAA,gBAAgCC;AAAhC;AAAA;AAAA;AAAA;AAAA,YAAb,GAA2D,GAHhE,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAO,MAAA,QAAQ,EAAGG,KAAD,IAAW;AAACN,QAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQC,WAAR,GAAsBK,KAAK,CAACW,MAAN,CAAaC,KAAnC;AAAyC,OAAtE;AAAwE,MAAA,IAAI,EAAC;AAA7E;AAAA;AAAA;AAAA;AAAA,YALJ,EAMK,CAAChB,UAAD,gBAAa;AAAG,MAAA,SAAS,EAAC,iBAAb;AAAA,gBAAgCE;AAAhC;AAAA;AAAA;AAAA;AAAA,YAAb,GAA2D,GANhE,eAOI;AAAQ,MAAA,OAAO,EAAEC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GAxCQP,O;;KAAAA,O;AAyCT,eAAeA,OAAf","sourcesContent":["import React,{useState}  from 'react';\nimport axios from 'axios'\nimport './addWord.css'\n\nfunction AddWord(props) {\n    let word = useState({\n        word: '',\n        translation: ''\n    });\n    let validation = useState(false);\n    let errorRu = useState('');\n    let errorEn = useState('');\n    async function addWordHandler(event) {\n        event.preventDefault();\n        validationForm();\n        if (validation){\n            try {\n                await axios.post('https://react-words-29c77-default-rtdb.firebaseio.com/word.json', word[0]);\n            } catch (e) {\n                console.log(e)\n            }\n        }\n    }\n    function validationForm() {\n        errorEn = validationWord(word[0].translation);\n        errorRu = validationWord(word[0].word);\n        validation =  errorRu !== '' && errorEN !== ''\n    }\n    function validationWord(word) {\n        if(word.trim().length === 0){\n            return 'Entry field doesn\\'t can be empty or complit of spaces'\n        }\n    }\n    return (\n        <div className = 'body'>\n            <p>Русское слово</p>\n            <input onChange={(event) => {word[0].word = event.target.value}} type=\"text\"/>\n            {!validation ?<p className='exception_valid'>{errorRu}</p>: '1' }\n            <p>Англиское слово</p>\n            <input onChange={(event) => {word[0].translation = event.target.value}} type=\"text\"/>\n            {!validation ?<p className='exception_valid'>{errorEn}</p>: '2' }\n            <button onClick={addWordHandler}>send</button>\n        </div>\n    );\n}\nexport default AddWord"]},"metadata":{},"sourceType":"module"}