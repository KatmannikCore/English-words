{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/English-words/src/containers/learnWords/learnWords.js\";\nimport React, { Component } from 'react';\nimport { GetAllThemesFromDB } from \"../../components/DataDB/DataDB\";\nimport './learnWords.css';\nimport ModalWindowChooseTheme from \"./modalWindowChooseTheme/modalWindowChooseTheme\";\nimport ModalWindowResultLearn from \"./modalWindowResultLearn/modalWindowResultLearn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LearnWords extends Component {\n  constructor() {\n    super();\n\n    this.changeTheme = value => {\n      if (value.list === undefined) {\n        this.setState({\n          validationErrors: 'You should choose theme'\n        });\n      } else {\n        this.setState({\n          validationErrors: '',\n          currentTheme: JSON.stringify(value.list),\n          currentWord: value.list[this.state.currentIndex]\n        });\n        this.createWindow();\n        console.log(this.state.currentTheme);\n      }\n    };\n\n    this.checkWordHandler = () => {\n      this.setState({\n        validationErrors: ''\n      });\n\n      if (this.state.currentTheme.length === 0) {\n        alert('тест закочен');\n      } else if (this.state.userWord.trim().length === 0) {\n        this.setState({\n          validationErrors: 'Entry field doesn\\'t can be empty or complit  of spaces'\n        });\n      } else {\n        this.nextWordHandler();\n      }\n\n      this.clearInput();\n    };\n\n    this.nextWordHandler = () => {\n      console.log(this.state.themes);\n      let currentTheme = this.state.currentTheme;\n      let index = currentTheme.indexOf(this.state.currentWord);\n      currentTheme.splice(index, 1);\n      let answers = this.state.answers;\n      answers.push({\n        numberQuestion: this.state.currentNumber,\n        isRightAnswer: this.state.userWord === this.state.currentWord.word,\n        word: this.state.currentWord,\n        userWord: this.state.userWord\n      });\n      this.setState({\n        currentTheme,\n        answers,\n        currentNumber: ++this.state.currentNumber\n      });\n      this.changeWordHandler();\n    };\n\n    this.changeWordHandler = () => {\n      if (this.state.currentTheme.length === 0) {\n        alert('тест закочен');\n        this.setState({\n          isEnd: !this.state.isEnd\n        });\n      } else {\n        this.setState({\n          currentWord: this.state.currentTheme[this.state.currentIndex],\n          currentIndex: Math.floor(Math.random() * (this.state.currentTheme.length - 1))\n        });\n      }\n\n      this.clearInput();\n    };\n\n    this.createWindow = () => {\n      // if (this.state.isOpenWindow) {\n      //     this.resetData()\n      // }\n      this.setState({\n        isOpenWindow: !this.state.isOpenWindow\n      });\n    };\n\n    this.onChangeHandler = event => {\n      this.setState({\n        userWord: event.target.value\n      });\n    };\n\n    this.resetData = () => {\n      this.setState({\n        currentWord: {},\n        currentIndex: 0,\n        currentNumber: 1,\n        isRightWord: false,\n        userWord: '',\n        currentTheme: [],\n        isOpenWindow: false,\n        answers: [],\n        isEnd: false\n      });\n    };\n\n    this.clearInput = () => {\n      this.setState({\n        userWord: ''\n      });\n    };\n\n    this.state = {\n      currentWord: {},\n      currentIndex: 0,\n      currentNumber: 1,\n      isRightWord: false,\n      userWord: '',\n      themes: [],\n      currentTheme: [],\n      isOpenWindow: false,\n      answers: [],\n      isEnd: false,\n      validationErrors: ''\n    };\n    this.changeTheme = this.changeTheme.bind(this);\n    this.resetData = this.resetData.bind(this);\n  }\n\n  componentDidMount() {\n    GetAllThemesFromDB().then(value => {\n      this.setState({\n        themes: value\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [this.state.isOpenWindow ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.isEnd ? /*#__PURE__*/_jsxDEV(ModalWindowResultLearn, {\n          active: this.state.isEnd,\n          endLearn: this.resetData,\n          answers: this.state.answers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 45\n        }, this) : '', /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.createWindow,\n          children: \"\\u0412\\u044B\\u0431\\u0440\\u0430\\u0442\\u044C \\u0442\\u0435\\u043C\\u0443\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.currentWord.translation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.changeWordHandler,\n          children: \"Change\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: this.state.userWord,\n          onChange: this.onChangeHandler,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.checkWordHandler,\n          children: \"Check\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(ModalWindowChooseTheme, {\n        themes: this.state.themes,\n        changeTheme: this.changeTheme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"validation_learn_word\",\n        children: this.state.validationErrors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default LearnWords;","map":{"version":3,"sources":["/Users/user/Desktop/English-words/src/containers/learnWords/learnWords.js"],"names":["React","Component","GetAllThemesFromDB","ModalWindowChooseTheme","ModalWindowResultLearn","LearnWords","constructor","changeTheme","value","list","undefined","setState","validationErrors","currentTheme","JSON","stringify","currentWord","state","currentIndex","createWindow","console","log","checkWordHandler","length","alert","userWord","trim","nextWordHandler","clearInput","themes","index","indexOf","splice","answers","push","numberQuestion","currentNumber","isRightAnswer","word","changeWordHandler","isEnd","Math","floor","random","isOpenWindow","onChangeHandler","event","target","resetData","isRightWord","bind","componentDidMount","then","render","translation"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {GetAllThemesFromDB} from \"../../components/DataDB/DataDB\";\nimport './learnWords.css'\nimport ModalWindowChooseTheme from \"./modalWindowChooseTheme/modalWindowChooseTheme\";\nimport ModalWindowResultLearn from \"./modalWindowResultLearn/modalWindowResultLearn\";\nclass LearnWords extends Component {\n    constructor(){\n        super();\n        this.state = {\n            currentWord: {},\n            currentIndex: 0,\n            currentNumber:1,\n            isRightWord: false,\n            userWord: '',\n            themes: [],\n            currentTheme: [],\n            isOpenWindow:false,\n            answers: [],\n            isEnd: false,\n            validationErrors: ''\n        };\n        this.changeTheme = this.changeTheme.bind(this);\n        this.resetData = this.resetData.bind(this);\n    }\n    changeTheme = (value) =>{\n        if (value.list ===  undefined){\n            this.setState({\n                validationErrors: 'You should choose theme'\n            })\n        } else {\n            this.setState({\n                validationErrors: '',\n                currentTheme: JSON.stringify(value.list),\n                currentWord: value.list[this.state.currentIndex]\n            });\n            this.createWindow()\n            console.log(this.state.currentTheme)\n        }\n    };\n    checkWordHandler = () => {\n        this.setState({\n            validationErrors: ''\n        });\n        if(this.state.currentTheme.length === 0){\n            alert('тест закочен');\n        }\n        else if(this.state.userWord.trim().length === 0){\n            this.setState({\n                validationErrors: 'Entry field doesn\\'t can be empty or complit  of spaces'\n            })\n        } else {\n            this.nextWordHandler();\n        }\n        this.clearInput()\n    };\n    nextWordHandler = () => {\n        console.log(this.state.themes);\n        let currentTheme = this.state.currentTheme;\n        let index = currentTheme.indexOf(this.state.currentWord);\n        currentTheme.splice(index, 1);\n        let answers = this.state.answers;\n        answers.push({numberQuestion: this.state.currentNumber, isRightAnswer: this.state.userWord === this.state.currentWord.word, word: this.state.currentWord, userWord: this.state.userWord })\n        this.setState({\n            currentTheme,\n            answers,\n            currentNumber: ++this.state.currentNumber\n        });\n        this.changeWordHandler();\n    };\n    changeWordHandler = () => {\n        if(this.state.currentTheme.length === 0){\n            alert('тест закочен');\n            this.setState({\n                isEnd: !this.state.isEnd\n            });\n        }else {\n            this.setState({\n                currentWord: this.state.currentTheme[this.state.currentIndex],\n                currentIndex: Math.floor(Math.random() *(this.state.currentTheme.length - 1))\n            });\n        }\n        this.clearInput()\n    };\n    createWindow = () => {\n        // if (this.state.isOpenWindow) {\n        //     this.resetData()\n        // }\n        this.setState({\n            isOpenWindow: !this.state.isOpenWindow\n        });\n    };\n    componentDidMount() {\n        GetAllThemesFromDB().then(value => {\n            this.setState({\n                themes: value,\n            })\n        });\n    }\n    onChangeHandler = (event) =>{\n        this.setState({userWord:event.target.value});\n    };\n    resetData = () =>{\n        this.setState( {\n            currentWord: {},\n            currentIndex: 0,\n            currentNumber:1,\n            isRightWord: false,\n            userWord: '',\n            currentTheme: [],\n            isOpenWindow:false,\n            answers: [],\n            isEnd: false\n        });\n    };\n    clearInput = () => {\n        this.setState({\n            userWord: ''\n        })\n    };\n    render() {\n        return (\n            <div className = 'body'>\n                {this.state.isOpenWindow ?(\n                    <div>\n                        {this.state.isEnd ? <ModalWindowResultLearn active={this.state.isEnd} endLearn={this.resetData} answers={this.state.answers} /> : ''}\n                        <button onClick={this.createWindow}>Выбрать тему</button>\n                        <p>{this.state.currentWord.translation}</p>\n                        <button onClick={this.changeWordHandler}>Change</button>\n                        <input value={this.state.userWord} onChange={this.onChangeHandler} type=\"text\"/>\n                        <button onClick={this.checkWordHandler}>Check</button>\n                    </div>)\n                    :(<ModalWindowChooseTheme themes={this.state.themes} changeTheme = {this.changeTheme}/>)\n                }\n                <div className='validation_learn_word'>\n                    {this.state.validationErrors}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LearnWords;"]},"metadata":{},"sourceType":"module"}