{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/English-words/src/containers/learnWords/learnWords.js\";\nimport React, { Component } from 'react';\nimport { GetAllThemesFromDB, GetAllWordsFromDB } from \"../../components/DataDB/DataDB\";\nimport './learnWords.css';\nimport ModalWindowChooseTheme from \"./modalWindowChooseTheme/modalWindowChooseTheme\";\nimport ModalWindowResultLearn from \"./modalWindowResultLearn/modalWindowResultLearn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LearnWords extends Component {\n  constructor() {\n    super();\n\n    this.changeTheme = value => {\n      console.log(value);\n\n      if (value === undefined) {\n        console.log(value);\n      } else {// this.setState({\n        //     currentTheme: value.list,\n        //     currentWord: value.list[this.state.currentIndex]\n        // });\n        // this.createWindow()\n      }\n    };\n\n    this.checkWordHandler = () => {\n      if (this.state.currentTheme.length === 0) {\n        alert('тест закочен');\n      } else {\n        this.nextWordHandler();\n      }\n\n      this.clearInput();\n    };\n\n    this.nextWordHandler = () => {\n      let currentTheme = this.state.currentTheme;\n      let index = currentTheme.indexOf(this.state.currentWord);\n      currentTheme.splice(index, 1);\n      let answers = this.state.answers;\n      answers.push({\n        numberQuestion: this.state.currentNumber,\n        isRightAnswer: this.state.userWord === this.state.currentWord.word,\n        word: this.state.currentWord,\n        userWord: this.state.userWord\n      });\n      this.setState({\n        currentTheme,\n        answers,\n        currentNumber: ++this.state.currentNumber\n      });\n      this.changeWordHandler();\n    };\n\n    this.changeWordHandler = () => {\n      if (this.state.currentTheme.length === 0) {\n        alert('тест закочен');\n        this.setState({\n          isEnd: !this.state.isEnd\n        });\n      } else {\n        this.setState({\n          currentWord: this.state.currentTheme[this.state.currentIndex],\n          currentIndex: Math.floor(Math.random() * (this.state.currentTheme.length - 1))\n        });\n      }\n\n      this.clearInput();\n    };\n\n    this.createWindow = () => {\n      this.setState({\n        isOpenWindow: !this.state.isOpenWindow\n      });\n    };\n\n    this.onChangeHandler = event => {\n      this.setState({\n        userWord: event.target.value\n      });\n    };\n\n    this.resetData = () => {\n      this.setState({\n        currentWord: {},\n        currentIndex: 0,\n        currentNumber: 1,\n        isRightWord: false,\n        userWord: '',\n        currentTheme: [],\n        isOpenWindow: false,\n        answers: [],\n        isEnd: false\n      });\n    };\n\n    this.clearInput = () => {\n      this.setState({\n        userWord: ''\n      });\n    };\n\n    this.state = {\n      currentWord: {},\n      currentIndex: 0,\n      currentNumber: 1,\n      isRightWord: false,\n      userWord: '',\n      themes: [],\n      currentTheme: [],\n      isOpenWindow: false,\n      answers: [],\n      isEnd: false\n    };\n    this.changeTheme = this.changeTheme.bind(this);\n    this.resetData = this.resetData.bind(this);\n  }\n\n  componentDidMount() {\n    GetAllThemesFromDB().then(value => {\n      this.setState({\n        themes: value\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: this.state.isOpenWindow ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.isEnd ? /*#__PURE__*/_jsxDEV(ModalWindowResultLearn, {\n          active: this.state.isEnd,\n          endLearn: this.resetData,\n          answers: this.state.answers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 45\n        }, this) : '', /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.createWindow,\n          children: \"\\u0412\\u044B\\u0431\\u0440\\u0430\\u0442\\u044C \\u0442\\u0435\\u043C\\u0443\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.currentWord.translation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.changeWordHandler,\n          children: \"Change\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: this.state.userWord,\n          onChange: this.onChangeHandler,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.checkWordHandler,\n          children: \"Check\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(ModalWindowChooseTheme, {\n        themes: this.state.themes,\n        changeTheme: this.changeTheme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default LearnWords;","map":{"version":3,"sources":["/Users/user/Desktop/English-words/src/containers/learnWords/learnWords.js"],"names":["React","Component","GetAllThemesFromDB","GetAllWordsFromDB","ModalWindowChooseTheme","ModalWindowResultLearn","LearnWords","constructor","changeTheme","value","console","log","undefined","checkWordHandler","state","currentTheme","length","alert","nextWordHandler","clearInput","index","indexOf","currentWord","splice","answers","push","numberQuestion","currentNumber","isRightAnswer","userWord","word","setState","changeWordHandler","isEnd","currentIndex","Math","floor","random","createWindow","isOpenWindow","onChangeHandler","event","target","resetData","isRightWord","themes","bind","componentDidMount","then","render","translation"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,kBAAR,EAA4BC,iBAA5B,QAAoD,gCAApD;AACA,OAAO,kBAAP;AACA,OAAOC,sBAAP,MAAmC,iDAAnC;AACA,OAAOC,sBAAP,MAAmC,iDAAnC;;;AACA,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AAC/BM,EAAAA,WAAW,GAAE;AACT;;AADS,SAiBbC,WAjBa,GAiBEC,KAAD,IAAU;AAEpBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;;AACA,UAAIA,KAAK,KAAKG,SAAd,EAAwB;AACpBF,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,OAFD,MAEO,CACH;AACA;AACA;AACA;AACA;AACH;AACJ,KA7BY;;AAAA,SA8BbI,gBA9Ba,GA8BM,MAAM;AACrB,UAAG,KAAKC,KAAL,CAAWC,YAAX,CAAwBC,MAAxB,KAAmC,CAAtC,EAAwC;AACpCC,QAAAA,KAAK,CAAC,cAAD,CAAL;AACH,OAFD,MAEM;AACF,aAAKC,eAAL;AACH;;AACD,WAAKC,UAAL;AACH,KArCY;;AAAA,SAsCbD,eAtCa,GAsCK,MAAM;AACpB,UAAIH,YAAY,GAAG,KAAKD,KAAL,CAAWC,YAA9B;AACA,UAAIK,KAAK,GAAGL,YAAY,CAACM,OAAb,CAAqB,KAAKP,KAAL,CAAWQ,WAAhC,CAAZ;AACAP,MAAAA,YAAY,CAACQ,MAAb,CAAoBH,KAApB,EAA2B,CAA3B;AACA,UAAII,OAAO,GAAG,KAAKV,KAAL,CAAWU,OAAzB;AACAA,MAAAA,OAAO,CAACC,IAAR,CAAa;AAACC,QAAAA,cAAc,EAAE,KAAKZ,KAAL,CAAWa,aAA5B;AAA2CC,QAAAA,aAAa,EAAE,KAAKd,KAAL,CAAWe,QAAX,KAAwB,KAAKf,KAAL,CAAWQ,WAAX,CAAuBQ,IAAzG;AAA+GA,QAAAA,IAAI,EAAE,KAAKhB,KAAL,CAAWQ,WAAhI;AAA6IO,QAAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWe;AAAlK,OAAb;AACA,WAAKE,QAAL,CAAc;AACVhB,QAAAA,YADU;AAEVS,QAAAA,OAFU;AAGVG,QAAAA,aAAa,EAAE,EAAE,KAAKb,KAAL,CAAWa;AAHlB,OAAd;AAKA,WAAKK,iBAAL;AACH,KAlDY;;AAAA,SAmDbA,iBAnDa,GAmDO,MAAM;AACtB,UAAG,KAAKlB,KAAL,CAAWC,YAAX,CAAwBC,MAAxB,KAAmC,CAAtC,EAAwC;AACpCC,QAAAA,KAAK,CAAC,cAAD,CAAL;AACA,aAAKc,QAAL,CAAc;AACVE,UAAAA,KAAK,EAAE,CAAC,KAAKnB,KAAL,CAAWmB;AADT,SAAd;AAGH,OALD,MAKM;AACF,aAAKF,QAAL,CAAc;AACVT,UAAAA,WAAW,EAAE,KAAKR,KAAL,CAAWC,YAAX,CAAwB,KAAKD,KAAL,CAAWoB,YAAnC,CADH;AAEVA,UAAAA,YAAY,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAgB,KAAKvB,KAAL,CAAWC,YAAX,CAAwBC,MAAxB,GAAiC,CAAjD,CAAX;AAFJ,SAAd;AAIH;;AACD,WAAKG,UAAL;AACH,KAhEY;;AAAA,SAiEbmB,YAjEa,GAiEE,MAAM;AACjB,WAAKP,QAAL,CAAc;AACVQ,QAAAA,YAAY,EAAE,CAAC,KAAKzB,KAAL,CAAWyB;AADhB,OAAd;AAGH,KArEY;;AAAA,SA6EbC,eA7Ea,GA6EMC,KAAD,IAAU;AACxB,WAAKV,QAAL,CAAc;AAACF,QAAAA,QAAQ,EAACY,KAAK,CAACC,MAAN,CAAajC;AAAvB,OAAd;AACH,KA/EY;;AAAA,SAgFbkC,SAhFa,GAgFD,MAAK;AACb,WAAKZ,QAAL,CAAe;AACXT,QAAAA,WAAW,EAAE,EADF;AAEXY,QAAAA,YAAY,EAAE,CAFH;AAGXP,QAAAA,aAAa,EAAC,CAHH;AAIXiB,QAAAA,WAAW,EAAE,KAJF;AAKXf,QAAAA,QAAQ,EAAE,EALC;AAMXd,QAAAA,YAAY,EAAE,EANH;AAOXwB,QAAAA,YAAY,EAAC,KAPF;AAQXf,QAAAA,OAAO,EAAE,EARE;AASXS,QAAAA,KAAK,EAAE;AATI,OAAf;AAWH,KA5FY;;AAAA,SA6Fbd,UA7Fa,GA6FA,MAAM;AACf,WAAKY,QAAL,CAAc;AACVF,QAAAA,QAAQ,EAAE;AADA,OAAd;AAGH,KAjGY;;AAET,SAAKf,KAAL,GAAa;AACTQ,MAAAA,WAAW,EAAE,EADJ;AAETY,MAAAA,YAAY,EAAE,CAFL;AAGTP,MAAAA,aAAa,EAAC,CAHL;AAITiB,MAAAA,WAAW,EAAE,KAJJ;AAKTf,MAAAA,QAAQ,EAAE,EALD;AAMTgB,MAAAA,MAAM,EAAE,EANC;AAOT9B,MAAAA,YAAY,EAAE,EAPL;AAQTwB,MAAAA,YAAY,EAAC,KARJ;AASTf,MAAAA,OAAO,EAAE,EATA;AAUTS,MAAAA,KAAK,EAAE;AAVE,KAAb;AAYA,SAAKzB,WAAL,GAAmB,KAAKA,WAAL,CAAiBsC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKH,SAAL,GAAiB,KAAKA,SAAL,CAAeG,IAAf,CAAoB,IAApB,CAAjB;AACH;;AAsDDC,EAAAA,iBAAiB,GAAG;AAChB7C,IAAAA,kBAAkB,GAAG8C,IAArB,CAA0BvC,KAAK,IAAI;AAC/B,WAAKsB,QAAL,CAAc;AACVc,QAAAA,MAAM,EAAEpC;AADE,OAAd;AAGH,KAJD;AAKH;;AAsBDwC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAG,MAAjB;AAAA,gBACK,KAAKnC,KAAL,CAAWyB,YAAX,gBACG;AAAA,mBACK,KAAKzB,KAAL,CAAWmB,KAAX,gBAAmB,QAAC,sBAAD;AAAwB,UAAA,MAAM,EAAE,KAAKnB,KAAL,CAAWmB,KAA3C;AAAkD,UAAA,QAAQ,EAAE,KAAKU,SAAjE;AAA4E,UAAA,OAAO,EAAE,KAAK7B,KAAL,CAAWU;AAAhG;AAAA;AAAA;AAAA;AAAA,gBAAnB,GAAiI,EADtI,eAEI;AAAQ,UAAA,OAAO,EAAE,KAAKc,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA,oBAAI,KAAKxB,KAAL,CAAWQ,WAAX,CAAuB4B;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAQ,UAAA,OAAO,EAAE,KAAKlB,iBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAO,UAAA,KAAK,EAAE,KAAKlB,KAAL,CAAWe,QAAzB;AAAmC,UAAA,QAAQ,EAAE,KAAKW,eAAlD;AAAmE,UAAA,IAAI,EAAC;AAAxE;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAQ,UAAA,OAAO,EAAE,KAAK3B,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,gBASK,QAAC,sBAAD;AAAwB,QAAA,MAAM,EAAE,KAAKC,KAAL,CAAW+B,MAA3C;AAAmD,QAAA,WAAW,EAAI,KAAKrC;AAAvE;AAAA;AAAA;AAAA;AAAA;AAVV;AAAA;AAAA;AAAA;AAAA,YADJ;AAeH;;AAnH8B;;AAsHnC,eAAeF,UAAf","sourcesContent":["import React, {Component} from 'react';\nimport {GetAllThemesFromDB, GetAllWordsFromDB} from \"../../components/DataDB/DataDB\";\nimport './learnWords.css'\nimport ModalWindowChooseTheme from \"./modalWindowChooseTheme/modalWindowChooseTheme\";\nimport ModalWindowResultLearn from \"./modalWindowResultLearn/modalWindowResultLearn\";\nclass LearnWords extends Component {\n    constructor(){\n        super();\n        this.state = {\n            currentWord: {},\n            currentIndex: 0,\n            currentNumber:1,\n            isRightWord: false,\n            userWord: '',\n            themes: [],\n            currentTheme: [],\n            isOpenWindow:false,\n            answers: [],\n            isEnd: false\n        };\n        this.changeTheme = this.changeTheme.bind(this);\n        this.resetData = this.resetData.bind(this);\n    }\n    changeTheme = (value) =>{\n\n        console.log(value)\n        if (value === undefined){\n            console.log(value)\n        } else {\n            // this.setState({\n            //     currentTheme: value.list,\n            //     currentWord: value.list[this.state.currentIndex]\n            // });\n            // this.createWindow()\n        }\n    };\n    checkWordHandler = () => {\n        if(this.state.currentTheme.length === 0){\n            alert('тест закочен');\n        }else {\n            this.nextWordHandler();\n        }\n        this.clearInput()\n    };\n    nextWordHandler = () => {\n        let currentTheme = this.state.currentTheme;\n        let index = currentTheme.indexOf(this.state.currentWord);\n        currentTheme.splice(index, 1);\n        let answers = this.state.answers;\n        answers.push({numberQuestion: this.state.currentNumber, isRightAnswer: this.state.userWord === this.state.currentWord.word, word: this.state.currentWord, userWord: this.state.userWord })\n        this.setState({\n            currentTheme,\n            answers,\n            currentNumber: ++this.state.currentNumber\n        });\n        this.changeWordHandler();\n    };\n    changeWordHandler = () => {\n        if(this.state.currentTheme.length === 0){\n            alert('тест закочен');\n            this.setState({\n                isEnd: !this.state.isEnd\n            });\n        }else {\n            this.setState({\n                currentWord: this.state.currentTheme[this.state.currentIndex],\n                currentIndex: Math.floor(Math.random() *(this.state.currentTheme.length - 1))\n            });\n        }\n        this.clearInput()\n    };\n    createWindow = () => {\n        this.setState({\n            isOpenWindow: !this.state.isOpenWindow\n        });\n    };\n    componentDidMount() {\n        GetAllThemesFromDB().then(value => {\n            this.setState({\n                themes: value,\n            })\n        });\n    }\n    onChangeHandler = (event) =>{\n        this.setState({userWord:event.target.value});\n    };\n    resetData = () =>{\n        this.setState( {\n            currentWord: {},\n            currentIndex: 0,\n            currentNumber:1,\n            isRightWord: false,\n            userWord: '',\n            currentTheme: [],\n            isOpenWindow:false,\n            answers: [],\n            isEnd: false\n        });\n    };\n    clearInput = () => {\n        this.setState({\n            userWord: ''\n        })\n    };\n    render() {\n        return (\n            <div className = 'body'>\n                {this.state.isOpenWindow ?(\n                    <div>\n                        {this.state.isEnd ? <ModalWindowResultLearn active={this.state.isEnd} endLearn={this.resetData} answers={this.state.answers} /> : ''}\n                        <button onClick={this.createWindow}>Выбрать тему</button>\n                        <p>{this.state.currentWord.translation}</p>\n                        <button onClick={this.changeWordHandler}>Change</button>\n                        <input value={this.state.userWord} onChange={this.onChangeHandler} type=\"text\"/>\n                        <button onClick={this.checkWordHandler}>Check</button>\n                    </div>)\n                    :(<ModalWindowChooseTheme themes={this.state.themes} changeTheme = {this.changeTheme}/>)\n                }\n            </div>\n        );\n    }\n}\n\nexport default LearnWords;"]},"metadata":{},"sourceType":"module"}