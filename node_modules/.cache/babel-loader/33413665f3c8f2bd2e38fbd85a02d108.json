{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/English-words/src/containers/learnWords/learnWords.js\";\nimport React, { Component } from 'react';\nimport { GetAllThemesFromDB, GetAllWordsFromDB } from \"../../components/DataDB/DataDB\";\nimport './learnWords.css';\nimport ModalWindowChooseTheme from \"./modalWindowChooseTheme/modalWindowChooseTheme\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LearnWords extends Component {\n  constructor() {\n    super();\n\n    this.changeTheme = value => {\n      this.setState({\n        currentTheme: value.list,\n        currentWord: value.list[this.state.currentIndex]\n      });\n      this.createWindow();\n    };\n\n    this.checkWordHandler = () => {\n      if (this.state.currentTheme.length === 0) {\n        alert('тест закочен');\n        console.log(this.state.answers);\n      } else {\n        this.nextWordHandler();\n      }\n    };\n\n    this.nextWordHandler = () => {\n      let currentTheme = this.state.currentTheme;\n      let index = currentTheme.indexOf(this.state.currentWord);\n      currentTheme.splice(index, 1);\n      let answers = this.state.answers;\n      answers.push({\n        numberQuestion: this.state.currentNumber,\n        isRightAnswer: this.state.userWord === this.state.currentWord.word,\n        word: this.state.currentWord,\n        userWord: this.state.userWord\n      });\n      this.setState({\n        currentTheme,\n        answers,\n        currentNumber: ++this.state.currentNumber\n      });\n      this.changeWordHandler();\n    };\n\n    this.changeWordHandler = () => {\n      if (this.state.currentTheme.length === 0) {\n        alert('тест закочен');\n        document.body.append(this.returnResult());\n      } else {\n        this.setState({\n          currentWord: this.state.currentTheme[this.state.currentIndex],\n          currentIndex: Math.floor(Math.random() * (this.state.currentTheme.length - 1))\n        });\n      }\n    };\n\n    this.createWindow = () => {\n      this.setState({\n        isOpenWindow: !this.state.isOpenWindow\n      });\n    };\n\n    this.onChangeHandler = event => {\n      this.setState({\n        userWord: event.target.value\n      });\n    };\n\n    this.returnResult = () => {\n      let stringResult = this.state.answers.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" Number: $\", item.numberQuestion, \" | answers: $\", item.isRightAnswer, \" word: $\", item.word.word, \" translation: $\", item.word.translation, \" user word: $\", item.userWord]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 20\n        }, this);\n      });\n      console.log(stringResult);\n    };\n\n    this.state = {\n      currentWord: {},\n      currentIndex: 0,\n      currentNumber: 1,\n      isRightWord: false,\n      userWord: '',\n      themes: [],\n      currentTheme: [],\n      isOpenWindow: false,\n      answers: []\n    };\n    this.changeTheme = this.changeTheme.bind(this);\n  }\n\n  componentDidMount() {\n    GetAllThemesFromDB().then(value => {\n      this.setState({\n        themes: value\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: this.state.isOpenWindow ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.createWindow,\n          children: \"\\u0412\\u044B\\u0431\\u0440\\u0430\\u0442\\u044C \\u0442\\u0435\\u043C\\u0443\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this), console.log(this.state.currentWord.translation), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.currentWord.translation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.changeWordHandler,\n          children: \"Change\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: this.onChangeHandler,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.checkWordHandler,\n          children: \"Check\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(ModalWindowChooseTheme, {\n        themes: this.state.themes,\n        changeTheme: this.changeTheme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default LearnWords;","map":{"version":3,"sources":["/Users/user/Desktop/English-words/src/containers/learnWords/learnWords.js"],"names":["React","Component","GetAllThemesFromDB","GetAllWordsFromDB","ModalWindowChooseTheme","LearnWords","constructor","changeTheme","value","setState","currentTheme","list","currentWord","state","currentIndex","createWindow","checkWordHandler","length","alert","console","log","answers","nextWordHandler","index","indexOf","splice","push","numberQuestion","currentNumber","isRightAnswer","userWord","word","changeWordHandler","document","body","append","returnResult","Math","floor","random","isOpenWindow","onChangeHandler","event","target","stringResult","map","item","translation","isRightWord","themes","bind","componentDidMount","then","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,kBAAR,EAA4BC,iBAA5B,QAAoD,gCAApD;AACA,OAAO,kBAAP;AACA,OAAOC,sBAAP,MAAmC,iDAAnC;;;AACA,MAAMC,UAAN,SAAyBJ,SAAzB,CAAmC;AAC/BK,EAAAA,WAAW,GAAE;AACT;;AADS,SAebC,WAfa,GAeEC,KAAD,IAAU;AACpB,WAAKC,QAAL,CAAc;AACVC,QAAAA,YAAY,EAAEF,KAAK,CAACG,IADV;AAEVC,QAAAA,WAAW,EAAEJ,KAAK,CAACG,IAAN,CAAW,KAAKE,KAAL,CAAWC,YAAtB;AAFH,OAAd;AAIA,WAAKC,YAAL;AACH,KArBY;;AAAA,SAsBbC,gBAtBa,GAsBM,MAAM;AACrB,UAAG,KAAKH,KAAL,CAAWH,YAAX,CAAwBO,MAAxB,KAAmC,CAAtC,EAAwC;AACpCC,QAAAA,KAAK,CAAC,cAAD,CAAL;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAL,CAAWQ,OAAvB;AACH,OAHD,MAGM;AACF,aAAKC,eAAL;AACH;AACJ,KA7BY;;AAAA,SA8BbA,eA9Ba,GA8BK,MAAM;AACpB,UAAIZ,YAAY,GAAG,KAAKG,KAAL,CAAWH,YAA9B;AACA,UAAIa,KAAK,GAAGb,YAAY,CAACc,OAAb,CAAqB,KAAKX,KAAL,CAAWD,WAAhC,CAAZ;AACAF,MAAAA,YAAY,CAACe,MAAb,CAAoBF,KAApB,EAA2B,CAA3B;AACA,UAAIF,OAAO,GAAG,KAAKR,KAAL,CAAWQ,OAAzB;AACAA,MAAAA,OAAO,CAACK,IAAR,CAAa;AAACC,QAAAA,cAAc,EAAE,KAAKd,KAAL,CAAWe,aAA5B;AAA2CC,QAAAA,aAAa,EAAE,KAAKhB,KAAL,CAAWiB,QAAX,KAAwB,KAAKjB,KAAL,CAAWD,WAAX,CAAuBmB,IAAzG;AAA+GA,QAAAA,IAAI,EAAE,KAAKlB,KAAL,CAAWD,WAAhI;AAA6IkB,QAAAA,QAAQ,EAAE,KAAKjB,KAAL,CAAWiB;AAAlK,OAAb;AACA,WAAKrB,QAAL,CAAc;AACVC,QAAAA,YADU;AAEVW,QAAAA,OAFU;AAGVO,QAAAA,aAAa,EAAE,EAAE,KAAKf,KAAL,CAAWe;AAHlB,OAAd;AAKA,WAAKI,iBAAL;AACH,KA1CY;;AAAA,SA2CbA,iBA3Ca,GA2CO,MAAM;AACtB,UAAG,KAAKnB,KAAL,CAAWH,YAAX,CAAwBO,MAAxB,KAAmC,CAAtC,EAAwC;AACpCC,QAAAA,KAAK,CAAC,cAAD,CAAL;AACAe,QAAAA,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqB,KAAKC,YAAL,EAArB;AACH,OAHD,MAGM;AACF,aAAK3B,QAAL,CAAc;AACVG,UAAAA,WAAW,EAAE,KAAKC,KAAL,CAAWH,YAAX,CAAwB,KAAKG,KAAL,CAAWC,YAAnC,CADH;AAEVA,UAAAA,YAAY,EAAEuB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAgB,KAAK1B,KAAL,CAAWH,YAAX,CAAwBO,MAAxB,GAAiC,CAAjD,CAAX;AAFJ,SAAd;AAIH;AACJ,KArDY;;AAAA,SAsDbF,YAtDa,GAsDE,MAAM;AACjB,WAAKN,QAAL,CAAc;AACV+B,QAAAA,YAAY,EAAE,CAAC,KAAK3B,KAAL,CAAW2B;AADhB,OAAd;AAGH,KA1DY;;AAAA,SAkEbC,eAlEa,GAkEMC,KAAD,IAAU;AACxB,WAAKjC,QAAL,CAAc;AAACqB,QAAAA,QAAQ,EAACY,KAAK,CAACC,MAAN,CAAanC;AAAvB,OAAd;AACH,KApEY;;AAAA,SAqEb4B,YArEa,GAqEE,MAAM;AACjB,UAAIQ,YAAY,GAAG,KAAK/B,KAAL,CAAWQ,OAAX,CAAmBwB,GAAnB,CAAuBC,IAAI,IAAI;AAC9C,4BAAO;AAAA,mCAAcA,IAAI,CAACnB,cAAnB,mBAAgDmB,IAAI,CAACjB,aAArD,cAA4EiB,IAAI,CAACf,IAAL,CAAUA,IAAtF,qBAA2Ge,IAAI,CAACf,IAAL,CAAUgB,WAArH,mBAA+ID,IAAI,CAAChB,QAApJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFkB,CAAnB;AAGAX,MAAAA,OAAO,CAACC,GAAR,CAAYwB,YAAZ;AACH,KA1EY;;AAET,SAAK/B,KAAL,GAAa;AACTD,MAAAA,WAAW,EAAE,EADJ;AAETE,MAAAA,YAAY,EAAE,CAFL;AAGTc,MAAAA,aAAa,EAAC,CAHL;AAIToB,MAAAA,WAAW,EAAE,KAJJ;AAKTlB,MAAAA,QAAQ,EAAE,EALD;AAMTmB,MAAAA,MAAM,EAAE,EANC;AAOTvC,MAAAA,YAAY,EAAE,EAPL;AAQT8B,MAAAA,YAAY,EAAC,KARJ;AASTnB,MAAAA,OAAO,EAAE;AATA,KAAb;AAWA,SAAKd,WAAL,GAAmB,KAAKA,WAAL,CAAiB2C,IAAjB,CAAsB,IAAtB,CAAnB;AACH;;AA6CDC,EAAAA,iBAAiB,GAAG;AAChBjD,IAAAA,kBAAkB,GAAGkD,IAArB,CAA0B5C,KAAK,IAAI;AAC/B,WAAKC,QAAL,CAAc;AACVwC,QAAAA,MAAM,EAAEzC;AADE,OAAd;AAGH,KAJD;AAKH;;AAUD6C,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAG,MAAjB;AAAA,gBACK,KAAKxC,KAAL,CAAW2B,YAAX,gBACG;AAAA,gCACI;AAAQ,UAAA,OAAO,EAAE,KAAKzB,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKI,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAL,CAAWD,WAAX,CAAuBmC,WAAnC,CAFL,eAGI;AAAA,oBAAI,KAAKlC,KAAL,CAAWD,WAAX,CAAuBmC;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAQ,UAAA,OAAO,EAAE,KAAKf,iBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAO,UAAA,QAAQ,EAAE,KAAKS,eAAtB;AAAuC,UAAA,IAAI,EAAC;AAA5C;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAQ,UAAA,OAAO,EAAE,KAAKzB,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,gBASK,QAAC,sBAAD;AAAwB,QAAA,MAAM,EAAE,KAAKH,KAAL,CAAWoC,MAA3C;AAAmD,QAAA,WAAW,EAAI,KAAK1C;AAAvE;AAAA;AAAA;AAAA;AAAA;AAVV;AAAA;AAAA;AAAA;AAAA,YADJ;AAeH;;AA5F8B;;AA+FnC,eAAeF,UAAf","sourcesContent":["import React, {Component} from 'react';\nimport {GetAllThemesFromDB, GetAllWordsFromDB} from \"../../components/DataDB/DataDB\";\nimport './learnWords.css'\nimport ModalWindowChooseTheme from \"./modalWindowChooseTheme/modalWindowChooseTheme\";\nclass LearnWords extends Component {\n    constructor(){\n        super();\n        this.state = {\n            currentWord: {},\n            currentIndex: 0,\n            currentNumber:1,\n            isRightWord: false,\n            userWord: '',\n            themes: [],\n            currentTheme: [],\n            isOpenWindow:false,\n            answers: []\n        };\n        this.changeTheme = this.changeTheme.bind(this)\n    }\n    changeTheme = (value) =>{\n        this.setState({\n            currentTheme: value.list,\n            currentWord: value.list[this.state.currentIndex]\n        });\n        this.createWindow()\n    };\n    checkWordHandler = () => {\n        if(this.state.currentTheme.length === 0){\n            alert('тест закочен');\n            console.log(this.state.answers);\n        }else {\n            this.nextWordHandler();\n        }\n    };\n    nextWordHandler = () => {\n        let currentTheme = this.state.currentTheme;\n        let index = currentTheme.indexOf(this.state.currentWord);\n        currentTheme.splice(index, 1);\n        let answers = this.state.answers;\n        answers.push({numberQuestion: this.state.currentNumber, isRightAnswer: this.state.userWord === this.state.currentWord.word, word: this.state.currentWord, userWord: this.state.userWord })\n        this.setState({\n            currentTheme,\n            answers,\n            currentNumber: ++this.state.currentNumber\n        });\n        this.changeWordHandler();\n    };\n    changeWordHandler = () => {\n        if(this.state.currentTheme.length === 0){\n            alert('тест закочен');\n            document.body.append(this.returnResult()) \n        }else {\n            this.setState({\n                currentWord: this.state.currentTheme[this.state.currentIndex],\n                currentIndex: Math.floor(Math.random() *(this.state.currentTheme.length - 1))\n            });\n        }\n    };\n    createWindow = () => {\n        this.setState({\n            isOpenWindow: !this.state.isOpenWindow\n        });\n    };\n    componentDidMount() {\n        GetAllThemesFromDB().then(value => {\n            this.setState({\n                themes: value,\n            })\n        });\n    }\n    onChangeHandler = (event) =>{\n        this.setState({userWord:event.target.value});\n    };\n    returnResult = () => {\n        let stringResult = this.state.answers.map(item => {\n            return <p> Number: ${item.numberQuestion} | answers: ${item.isRightAnswer} word: ${item.word.word} translation: ${item.word.translation} user word: ${item.userWord}</p>\n        });\n        console.log(stringResult)\n    };\n    render() {\n        return (\n            <div className = 'body'>\n                {this.state.isOpenWindow ?(\n                    <div>\n                        <button onClick={this.createWindow}>Выбрать тему</button>\n                        {console.log(this.state.currentWord.translation)}\n                        <p>{this.state.currentWord.translation}</p>\n                        <button onClick={this.changeWordHandler}>Change</button>\n                        <input onChange={this.onChangeHandler} type=\"text\"/>\n                        <button onClick={this.checkWordHandler}>Check</button>\n                    </div>)\n                    :(<ModalWindowChooseTheme themes={this.state.themes} changeTheme = {this.changeTheme}/>)\n                }\n            </div>\n        );\n    }\n}\n\nexport default LearnWords;"]},"metadata":{},"sourceType":"module"}